{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/jenil/Desktop/code/portfolio/src/components/Image.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport Markdown from \"@/utils/Markdown\";\nimport cxs from \"cxs\";\nimport React, { useContext } from \"react\";\nimport { Align, Caption, Figure } from \"./designSystem\";\nimport WebPSupportContext from \"./WebPSupportContext\";\n\nvar Image = function Image(_ref) {\n  _s();\n\n  var align = _ref.align,\n      alt = _ref.alt,\n      className = _ref.className,\n      caption = _ref.caption,\n      _ref$invertInDarkMode = _ref.invertInDarkMode,\n      invertInDarkMode = _ref$invertInDarkMode === void 0 ? false : _ref$invertInDarkMode,\n      _ref$responsive = _ref.responsive,\n      responsive = _ref$responsive === void 0 ? true : _ref$responsive,\n      _ref$margin = _ref.margin,\n      margin = _ref$margin === void 0 ? true : _ref$margin,\n      src = _ref.src;\n  var Wrapper;\n  var usesSrcSet = !src.endsWith(\"svg\");\n  var extension = src.split(\".\").slice(-1);\n  var imageWidths = [114, 272, 340, 544, 680, 1360]; // Assume webp support by default to limit requests on modern browsers\n\n  var webPSupport = useContext(WebPSupportContext);\n  var srcSet = imageWidths.map(function (size) {\n    return \"/api/image?name=/uploads/\".concat(src, \"&w=\").concat(size, \"&fm=\").concat(webPSupport ? \"webp\" : extension, \"\\n         \").concat(size, \"w\");\n  }).join(\", \");\n  var defaultSizes = \"(min-width: 860px) 680px, (min-width: 621px) calc(57.14vw + 189px), calc(90.63vw - 18px)\";\n  var alignedSizes = \"(min-width: 1024px) 340px, (min-width: 800px) 272px, (min-width: 621px) calc(75.84vw + 73px), calc(90.63vw - 18px)\";\n  var sizes = defaultSizes;\n  var imageClassName = cxs({\n    \"@media (prefers-color-scheme: dark)\": {\n      filter: invertInDarkMode ? \"invert(100%) hue-rotate(180deg)\" : \"initial\"\n    }\n  });\n\n  switch (align) {\n    case \"left\":\n      Wrapper = Align.Left;\n      sizes = alignedSizes;\n      break;\n\n    case \"right\":\n      Wrapper = Align.Right;\n      sizes = alignedSizes;\n      break;\n\n    default:\n      Wrapper = React.Fragment;\n  }\n\n  var img = __jsx(\"img\", {\n    alt: alt,\n    className: imageClassName,\n    loading: \"lazy\",\n    sizes: sizes,\n    src: \"/uploads/\" + src,\n    srcSet: usesSrcSet ? srcSet : \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  });\n\n  return __jsx(Wrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, __jsx(Figure, {\n    className: className,\n    margin: margin,\n    responsive: responsive,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, img, caption && __jsx(Caption, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(Markdown, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, caption))));\n};\n\n_s(Image, \"CPYaDPs2ymWjlYkHcXml/RmnwT0=\");\n\n_c = Image;\nexport default Image;\n\nvar _c;\n\n$RefreshReg$(_c, \"Image\");","map":{"version":3,"sources":["/Users/jenil/Desktop/code/portfolio/src/components/Image.tsx"],"names":["Markdown","cxs","React","useContext","Align","Caption","Figure","WebPSupportContext","Image","align","alt","className","caption","invertInDarkMode","responsive","margin","src","Wrapper","usesSrcSet","endsWith","extension","split","slice","imageWidths","webPSupport","srcSet","map","size","join","defaultSizes","alignedSizes","sizes","imageClassName","filter","Left","Right","Fragment","img"],"mappings":"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","sourcesContent":["import Markdown from \"@/utils/Markdown\"\nimport cxs from \"cxs\"\nimport React, { FunctionComponent, useContext } from \"react\"\nimport { Align, Caption, Figure } from \"./designSystem\"\nimport { FigureProps } from \"./designSystem/Figure\"\nimport WebPSupportContext from \"./WebPSupportContext\"\n\ninterface ImageProps extends Omit<FigureProps, \"children\"> {\n  align?: \"left\" | \"right\"\n  alt?: string\n  caption?: string\n  defaultSize?: string\n  invertInDarkMode?: boolean\n  src: string\n}\n\nconst Image = ({\n  align,\n  alt,\n  className,\n  caption,\n  invertInDarkMode = false,\n  responsive = true,\n  margin = true,\n  src,\n}: ImageProps) => {\n  let Wrapper: typeof Align.Left | typeof Align.Right | typeof React.Fragment\n  const usesSrcSet = !src.endsWith(\"svg\")\n  const extension = src.split(\".\").slice(-1)\n  const imageWidths = [114, 272, 340, 544, 680, 1360]\n\n  // Assume webp support by default to limit requests on modern browsers\n  const webPSupport = useContext(WebPSupportContext)\n\n  const srcSet = imageWidths\n    .map(\n      (size) =>\n        `/api/image?name=/uploads/${src}&w=${size}&fm=${\n          webPSupport ? \"webp\" : extension\n        }\n         ${size}w`\n    )\n    .join(\", \")\n\n  const defaultSizes =\n    \"(min-width: 860px) 680px, (min-width: 621px) calc(57.14vw + 189px), calc(90.63vw - 18px)\"\n  const alignedSizes =\n    \"(min-width: 1024px) 340px, (min-width: 800px) 272px, (min-width: 621px) calc(75.84vw + 73px), calc(90.63vw - 18px)\"\n  let sizes = defaultSizes\n\n  const imageClassName = cxs({\n    \"@media (prefers-color-scheme: dark)\": {\n      filter: invertInDarkMode ? \"invert(100%) hue-rotate(180deg)\" : \"initial\",\n    },\n  })\n\n  switch (align) {\n    case \"left\":\n      Wrapper = Align.Left\n      sizes = alignedSizes\n      break\n    case \"right\":\n      Wrapper = Align.Right\n      sizes = alignedSizes\n      break\n    default:\n      Wrapper = React.Fragment\n  }\n\n  const img = (\n    <img\n      alt={alt}\n      className={imageClassName}\n      loading=\"lazy\"\n      sizes={sizes}\n      src={\"/uploads/\" + src}\n      srcSet={usesSrcSet ? srcSet : \"\"}\n    />\n  )\n\n  return (\n    <Wrapper>\n      <Figure className={className} margin={margin} responsive={responsive}>\n        {img}\n        {caption && (\n          <Caption>\n            <Markdown>{caption}</Markdown>\n          </Caption>\n        )}\n      </Figure>\n    </Wrapper>\n  )\n}\n\nexport default Image\n"]},"metadata":{},"sourceType":"module"}