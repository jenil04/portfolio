"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sugar-high";
exports.ids = ["vendor-chunks/sugar-high"];
exports.modules = {

/***/ "(rsc)/./node_modules/sugar-high/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/sugar-high/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SugarHigh: () => (/* binding */ SugarHigh),\n/* harmony export */   highlight: () => (/* binding */ highlight),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n// @ts-check\nconst jsxBrackets = new Set([\n    \"<\",\n    \">\",\n    \"{\",\n    \"}\",\n    \"[\",\n    \"]\"\n]);\nconst keywords = new Set([\n    \"for\",\n    \"do\",\n    \"while\",\n    \"if\",\n    \"else\",\n    \"return\",\n    \"function\",\n    \"var\",\n    \"let\",\n    \"const\",\n    \"true\",\n    \"false\",\n    \"undefined\",\n    \"this\",\n    \"new\",\n    \"delete\",\n    \"typeof\",\n    \"in\",\n    \"instanceof\",\n    \"void\",\n    \"break\",\n    \"continue\",\n    \"switch\",\n    \"case\",\n    \"default\",\n    \"throw\",\n    \"try\",\n    \"catch\",\n    \"finally\",\n    \"debugger\",\n    \"with\",\n    \"yield\",\n    \"async\",\n    \"await\",\n    \"class\",\n    \"extends\",\n    \"super\",\n    \"import\",\n    \"export\",\n    \"from\",\n    \"static\"\n]);\nconst signs = new Set([\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"=\",\n    \"!\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"~\",\n    \"!\",\n    \"?\",\n    \":\",\n    \".\",\n    \",\",\n    \";\",\n    `'`,\n    '\"',\n    \".\",\n    \"(\",\n    \")\",\n    \"[\",\n    \"]\",\n    \"#\",\n    \"@\",\n    \"\\\\\",\n    ...jsxBrackets\n]);\n/**\n *\n * 0  - identifier\n * 1  - keyword\n * 2  - string\n * 3  - Class, number and null\n * 4  - property\n * 5  - entity\n * 6  - jsx literals\n * 7  - sign\n * 8  - comment\n * 9  - break\n * 10 - space\n *\n */ const types = /** @type {const} */ [\n    \"identifier\",\n    \"keyword\",\n    \"string\",\n    \"class\",\n    \"property\",\n    \"entity\",\n    \"jsxliterals\",\n    \"sign\",\n    \"comment\",\n    \"break\",\n    \"space\"\n];\nconst [T_IDENTIFIER, T_KEYWORD, T_STRING, T_CLS_NUMBER, T_PROPERTY, T_ENTITY, T_JSX_LITERALS, T_SIGN, T_COMMENT, T_BREAK, T_SPACE] = /** @types {const} */ types.map((_, i)=>i);\nfunction isSpaces(str) {\n    return /^[^\\S\\r\\n]+$/g.test(str);\n}\nfunction isSign(ch) {\n    return signs.has(ch);\n}\nfunction encode(str) {\n    return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n}\nfunction isWord(chr) {\n    return /^[\\w_]+$/.test(chr) || hasUnicode(chr);\n}\nfunction isCls(str) {\n    const chr0 = str[0];\n    return isWord(chr0) && chr0 === chr0.toUpperCase() || str === \"null\";\n}\nfunction hasUnicode(s) {\n    return /[^\\u0000-\\u007f]/.test(s);\n}\nfunction isAlpha(chr) {\n    return /^[a-zA-Z]$/.test(chr);\n}\nfunction isIdentifierChar(chr) {\n    return isAlpha(chr) || hasUnicode(chr);\n}\nfunction isIdentifier(str) {\n    return isIdentifierChar(str[0]) && (str.length === 1 || isWord(str.slice(1)));\n}\nfunction isStrTemplateChr(chr) {\n    return chr === \"`\";\n}\nfunction isSingleQuotes(chr) {\n    return chr === '\"' || chr === \"'\";\n}\nfunction isStringQuotation(chr) {\n    return isSingleQuotes(chr) || isStrTemplateChr(chr);\n}\nfunction isCommentStart(str) {\n    str = str.slice(0, 2);\n    return str === \"//\" || str === \"/*\";\n}\nfunction isRegexStart(str) {\n    return str[0] === \"/\" && !isCommentStart(str[0] + str[1]);\n}\n/**\n * @param {string} code\n * @return {Array<[number, string]>}\n */ function tokenize(code) {\n    let current = \"\";\n    let type = -1;\n    /** @type {[number, string]} */ let last = [\n        -1,\n        \"\"\n    ];\n    /** @type {[number, string]} */ let beforeLast = [\n        -2,\n        \"\"\n    ];\n    /** @type {Array<[number, string]>} */ const tokens = [];\n    /** @type boolean if entered jsx tag, inside <open tag> or </close tag> */ let __jsxEnter = false;\n    /**\n   * @type {0 | 1 | 2}\n   * @example\n   * 0 for not in jsx;\n   * 1 for open jsx tag;\n   * 2 for closing jsx tag;\n   **/ let __jsxTag = 0;\n    let __jsxExpr = false;\n    // only match paired (open + close) tags, not self-closing tags\n    let __jsxStack = 0;\n    const __jsxChild = ()=>__jsxEnter && !__jsxExpr && !__jsxTag;\n    // < __content__ >\n    const inJsxTag = ()=>__jsxTag && !__jsxChild();\n    // {'__content__'}\n    const inJsxLiterals = ()=>!__jsxTag && __jsxChild() && !__jsxExpr && __jsxStack > 0;\n    /** @type {string | null} */ let __strQuote = null;\n    let __strTemplateExprStack = 0;\n    let __strTemplateQuoteStack = 0;\n    const inStringQuotes = ()=>__strQuote !== null;\n    const inStrTemplateLiterals = ()=>__strTemplateQuoteStack > __strTemplateExprStack;\n    const inStrTemplateExpr = ()=>__strTemplateQuoteStack > 0 && __strTemplateQuoteStack === __strTemplateExprStack;\n    const inStringContent = ()=>inStringQuotes() || inStrTemplateLiterals();\n    /**\n   *\n   * @param {string} token\n   * @returns {number}\n   */ function classify(token) {\n        const isLineBreak = token === \"\\n\";\n        // First checking if they're attributes values\n        if (inJsxTag()) {\n            if (inStringQuotes()) {\n                return T_STRING;\n            }\n            const [, lastToken] = last;\n            if (isIdentifier(token)) {\n                // classify jsx open tag\n                if (lastToken === \"<\" || lastToken === \"</\") return T_ENTITY;\n            }\n        }\n        // Then determine if they're jsx literals\n        const isJsxLiterals = inJsxLiterals();\n        if (isJsxLiterals) return T_JSX_LITERALS;\n        // Determine strings first before other types\n        if (inStringQuotes()) {\n            return T_STRING;\n        } else if (keywords.has(token)) {\n            return last[1] === \".\" ? T_IDENTIFIER : T_KEYWORD;\n        } else if (isLineBreak) {\n            return T_BREAK;\n        } else if (isSpaces(token)) {\n            return T_SPACE;\n        } else if (token.split(\"\").every(isSign)) {\n            return T_SIGN;\n        } else if (isCls(token)) {\n            return inJsxTag() ? T_IDENTIFIER : T_CLS_NUMBER;\n        } else {\n            if (isIdentifier(token)) {\n                const isLastPropDot = last[1] === \".\" && isIdentifier(beforeLast[1]);\n                if (!inStringContent() && !isLastPropDot) return T_IDENTIFIER;\n                if (isLastPropDot) return T_PROPERTY;\n            }\n            return T_STRING;\n        }\n    }\n    const append = (_type, _token)=>{\n        if (_token) {\n            current = _token;\n        }\n        if (current) {\n            type = _type || classify(current);\n            /** @type [number, string]  */ const pair = [\n                type,\n                current\n            ];\n            if (type !== T_SPACE && type !== T_BREAK) {\n                beforeLast = last;\n                last = pair;\n            }\n            tokens.push(pair);\n        }\n        current = \"\";\n    };\n    for(let i = 0; i < code.length; i++){\n        const curr = code[i];\n        const prev = code[i - 1];\n        const next = code[i + 1];\n        const p_c = prev + curr // previous and current\n        ;\n        const c_n = curr + next // current and next\n        ;\n        // Determine string quotation outside of jsx literals.\n        // Inside jsx literals, string quotation is still part of it.\n        if (isSingleQuotes(curr) && !inJsxLiterals()) {\n            append();\n            if (prev !== `\\\\`) {\n                if (__strQuote && curr === __strQuote) {\n                    __strQuote = null;\n                } else if (!__strQuote) {\n                    __strQuote = curr;\n                }\n            }\n            append(T_STRING, curr);\n            continue;\n        }\n        if (!inStrTemplateLiterals()) {\n            if (prev !== \"\\\\n\" && isStrTemplateChr(curr)) {\n                append();\n                append(T_STRING, curr);\n                __strTemplateQuoteStack++;\n                continue;\n            }\n        }\n        if (inStrTemplateLiterals()) {\n            if (prev !== \"\\\\n\" && isStrTemplateChr(curr)) {\n                if (__strTemplateQuoteStack > 0) {\n                    append();\n                    __strTemplateQuoteStack--;\n                    append(T_STRING, curr);\n                    continue;\n                }\n            }\n            if (c_n === \"${\") {\n                __strTemplateExprStack++;\n                append(T_STRING);\n                append(T_SIGN, c_n);\n                i++;\n                continue;\n            }\n        }\n        if (inStrTemplateExpr() && curr === \"}\") {\n            append();\n            __strTemplateExprStack--;\n            append(T_SIGN, curr);\n            continue;\n        }\n        if (__jsxChild()) {\n            if (curr === \"{\") {\n                append();\n                append(T_SIGN, curr);\n                __jsxExpr = true;\n                continue;\n            }\n        }\n        if (__jsxEnter) {\n            // <: open tag sign\n            // new '<' not inside jsx\n            if (!__jsxTag && curr === \"<\") {\n                append();\n                if (next === \"/\") {\n                    // close tag\n                    __jsxTag = 2;\n                    current = c_n;\n                    i++;\n                } else {\n                    // open tag\n                    __jsxTag = 1;\n                    current = curr;\n                }\n                append(T_SIGN);\n                continue;\n            }\n            if (__jsxTag) {\n                // >: open tag close sign or closing tag closing sign\n                // and it's not `=>` or `/>`\n                // `curr` could be `>` or `/`\n                if (curr === \">\" && !\"/=\".includes(prev)) {\n                    append();\n                    if (__jsxTag === 1) {\n                        __jsxTag = 0;\n                        __jsxStack++;\n                    } else {\n                        __jsxTag = 0;\n                        __jsxEnter = false;\n                    }\n                    append(T_SIGN, curr);\n                    continue;\n                }\n                // >: tag self close sign or close tag sign\n                if (c_n === \"/>\" || c_n === \"</\") {\n                    // if current token is not part of close tag sign, push it first\n                    if (current !== \"<\" && current !== \"/\") {\n                        append();\n                    }\n                    if (c_n === \"/>\") {\n                        __jsxTag = 0;\n                    } else {\n                        // is '</'\n                        __jsxStack--;\n                    }\n                    if (!__jsxStack) __jsxEnter = false;\n                    current = c_n;\n                    i++;\n                    append(T_SIGN);\n                    continue;\n                }\n                // <: open tag sign\n                if (curr === \"<\") {\n                    append();\n                    current = curr;\n                    append(T_SIGN);\n                    continue;\n                }\n                // jsx property\n                // `-` in data-prop\n                if (next === \"-\" && !inStringContent() && !inJsxLiterals()) {\n                    if (current) {\n                        append(T_PROPERTY, current + curr + next);\n                        i += 1;\n                        continue;\n                    }\n                }\n                // `=` in property=<value>\n                if (next === \"=\" && !inStringContent()) {\n                    const prop = current ? current + curr : curr;\n                    if (isIdentifier(prop)) {\n                        current = prop;\n                        append(T_PROPERTY);\n                    }\n                    continue;\n                }\n            }\n        }\n        // if it's not in a jsx tag declaration or a string, close child if next is jsx close tag\n        if (!__jsxTag && (curr === \"<\" && isIdentifierChar(next) || c_n === \"</\")) {\n            __jsxTag = next === \"/\" ? 2 : 1;\n            // current and next char can form a jsx open or close tag\n            if (curr === \"<\" && (next === \"/\" || isAlpha(next))) {\n                __jsxEnter = true;\n            }\n        }\n        const isQuotationChar = isStringQuotation(curr);\n        const isStringTemplateLiterals = inStrTemplateLiterals();\n        const isRegexChar = !__jsxEnter && isRegexStart(c_n);\n        const isJsxLiterals = inJsxLiterals();\n        // string quotation\n        if (isQuotationChar || isStringTemplateLiterals || isSingleQuotes(__strQuote)) {\n            current += curr;\n        } else if (isRegexChar) {\n            append();\n            const [lastType, lastToken] = last;\n            // Special cases that are not considered as regex:\n            // * (expr1) / expr2: `)` before `/` operator is still in expression\n            // * <non comment start>/ expr: non comment start before `/` is not regex\n            if (isRegexChar && lastType !== -1 && !(lastType === T_SIGN && \")\" !== lastToken || lastType === T_COMMENT)) {\n                current = curr;\n                append();\n                continue;\n            }\n            const start = i++;\n            // end of line of end of file\n            const isEof = ()=>i >= code.length;\n            const isEol = ()=>isEof() || code[i] === \"\\n\";\n            let foundClose = false;\n            // regex\n            for(; !isEol(); i++){\n                if (code[i] === \"/\" && code[i - 1] !== \"\\\\\") {\n                    foundClose = true;\n                    // append regex flags\n                    while(start !== i && /^[a-z]$/.test(code[i + 1]) && !isEol()){\n                        i++;\n                    }\n                    break;\n                }\n            }\n            if (start !== i && foundClose) {\n                // If current line is fully closed with string quotes or regex slashes,\n                // add them to tokens\n                current = code.slice(start, i + 1);\n                append(T_STRING);\n            } else {\n                // If it doesn't match any of the above, just leave it as operator and move on\n                current = curr;\n                append();\n                i = start;\n            }\n        } else if (isCommentStart(c_n)) {\n            append();\n            const start = i;\n            if (next === \"/\") {\n                for(; i < code.length && code[i] !== \"\\n\"; i++);\n            } else {\n                for(; i < code.length && code[i - 1] + code[i] !== \"*/\"; i++);\n            }\n            current = code.slice(start, i + 1);\n            append(T_COMMENT);\n        } else if (curr === \" \" || curr === \"\\n\") {\n            if (curr === \" \" && (isSpaces(current) || !current || isJsxLiterals)) {\n                current += curr;\n                if (next === \"<\") {\n                    append();\n                }\n            } else {\n                append();\n                current = curr;\n                append();\n            }\n        } else {\n            if (__jsxExpr && curr === \"}\") {\n                append();\n                current = curr;\n                append();\n                __jsxExpr = false;\n            } else if (// it's jsx literals and is not a jsx bracket\n            isJsxLiterals && !jsxBrackets.has(curr) || // same type char as previous one in current token\n            (isWord(curr) === isWord(current[current.length - 1]) || __jsxChild()) && !signs.has(curr)) {\n                current += curr;\n            } else {\n                if (p_c === \"</\") {\n                    current = p_c;\n                }\n                append();\n                if (p_c !== \"</\") {\n                    current = curr;\n                }\n                if (c_n === \"</\" || c_n === \"/>\") {\n                    current = c_n;\n                    append();\n                    i++;\n                } else if (jsxBrackets.has(curr)) append();\n            }\n        }\n    }\n    append();\n    return tokens;\n}\n/**\n * @param {Array<[number, string]>} tokens\n * @return {Array<string>}\n */ function generate(tokens) {\n    const linesHtml = [];\n    const createLine = (content)=>`<span class=\"sh__line\">${content}</span>`;\n    function flushLine(tokens) {\n        linesHtml.push(createLine(tokens.map(([type, value])=>`<span class=\"sh__token--${types[type]}\" style=\"color: var(--sh-${types[type]})\">${encode(value)}</span>`).join(\"\")));\n    }\n    const lineTokens = [];\n    for(let i = 0; i < tokens.length; i++){\n        const token = tokens[i];\n        const [type, value] = token;\n        if (type !== T_BREAK) {\n            // Divide multi-line token into multi-line code\n            if (value.includes(\"\\n\")) {\n                const lines = value.split(\"\\n\");\n                for(let j = 0; j < lines.length; j++){\n                    lineTokens.push([\n                        type,\n                        lines[j]\n                    ]);\n                    if (j < lines.length - 1) {\n                        flushLine(lineTokens);\n                        lineTokens.length = 0;\n                    }\n                }\n            } else {\n                lineTokens.push(token);\n            }\n        } else {\n            lineTokens.push([\n                type,\n                \"\"\n            ]);\n            flushLine(lineTokens);\n            lineTokens.length = 0;\n        }\n    }\n    if (lineTokens.length) flushLine(lineTokens);\n    return linesHtml;\n}\n/**\n *\n * @param {string} code\n * @returns {string}\n */ function highlight(code) {\n    const tokens = tokenize(code);\n    const output = generate(tokens).join(\"\\n\");\n    return output;\n}\n// namespace\nconst SugarHigh = /** @type {const} */ {\n    TokenTypes: types\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sugar-high/lib/index.js\n");

/***/ })

};
;